// Generated by CoffeeScript 1.3.1
(function() {
  var avoid_objects, fail, success,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.msIndexedDB;

  window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction;

  window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;

  window.IDBCursor = window.IDBCursor || window.webkitIDBCursor || window.msIDBCursor;

  avoid_objects = ["window['performance']", "window['event']", "window['console']", "window['document']", "window['history']", "window['clientInformation']", "window['navigator']", "window['$']", "window['Audio']", "window['Image']", "window['Option']"];

  success = function() {
    return console.log("%csuccess", "background-color:#5bb75b;color:white");
  };

  fail = function() {
    return console.log("%cfail", "background-color:#da4f49;color:white");
  };

  window.porky = {};

  porky.Db = (function() {
    var DBNAME, SCHEMA, TABLE, register_report, report;

    Db.name = 'Db';

    DBNAME = '';

    TABLE = '';

    SCHEMA = {};

    report = function(error, event) {
      console.group("Report");
      console.log(error);
      console.log(event);
      return console.groupEnd("Report");
    };

    register_report = function(data) {
      console.group("Registed");
      success();
      console.log(data);
      return console.groupEnd("Registed");
    };

    function Db(dbname, table) {
      DBNAME = dbname;
      TABLE = table;
      SCHEMA = {
        "schema": {
          "1": function(versionTransaction) {
            var fixture;
            fixture = versionTransaction.createObjectStore(TABLE, {
              "keyPath": "name",
              "autoIncrement": false
            });
            return fixture.createIndex("name");
          }
        }
      };
    }

    Db.prototype.put = function(data) {
      var obj;
      obj = $.indexedDB(DBNAME, SCHEMA).objectStore(TABLE);
      return obj.put(data).then(function() {
        return register_report(data);
      }, report);
    };

    Db.prototype.find = function(name) {
      return $.indexedDB(DBNAME, SCHEMA).objectStore(TABLE).get(name);
    };

    Db.prototype.get = function(run) {
      var list;
      list = [];
      return $.indexedDB(DBNAME, SCHEMA).objectStore(TABLE).index('name').each(function(e) {
        list.push(e.value);
      }).then(function() {
        return run(list);
      }, report);
    };

    Db.prototype["delete"] = function(key) {
      return $.indexedDB(DBNAME, SCHEMA).objectStore(TABLE)["delete"](key).then(report, report);
    };

    return Db;

  })();

  porky.Register = (function() {
    var DBNAME, TABLE, checked_objects, register, register_f2s, register_fixture;

    Register.name = 'Register';

    DBNAME = 'PORKY';

    TABLE = 'fixtures';

    checked_objects = {};

    register_f2s = function(obj, obj_path, obj_type) {
      var helper, native_func;
      checked_objects[obj_type] = [];
      register_fixture.checked_paths[obj_type] = register_fixture.checked_paths[obj_type] || [];
      native_func = /(return)? *function .*\(.*\) {\n? +\[?native (function)?/;
      helper = function(help_obj, path) {
        var i, key, path_index, temp_path, that, v, value, _ref;
        switch (false) {
          case help_obj !== null:
            return help_obj;
          case typeof help_obj !== 'function':
            return "(function(){return " + (String(help_obj)) + "})()";
          case __indexOf.call(checked_objects[obj_type], help_obj) < 0:
            path_index = checked_objects[obj_type].indexOf(help_obj);
            temp_path = register_fixture.checked_paths[obj_type][path_index];
            return "(function(){return " + temp_path + "})()";
          case !(help_obj instanceof Array):
            checked_objects[obj_type].push(help_obj);
            register_fixture.checked_paths[obj_type].push(path);
            return (function() {
              var _i, _len, _results;
              _results = [];
              for (i = _i = 0, _len = help_obj.length; _i < _len; i = ++_i) {
                v = help_obj[i];
                _results.push(helper(v, "" + path + "[" + i + "]"));
              }
              return _results;
            })();
          case !(help_obj instanceof jQuery):
            console.log('%cPorky does not support jQuery objects', 'color:#666');
            return 'jQuery object';
          case typeof help_obj !== "object":
            checked_objects[obj_type].push(help_obj);
            register_fixture.checked_paths[obj_type].push(path);
            that = {};
            for (key in help_obj) {
              value = help_obj[key];
              if (!(String(value).match(native_func)) && (_ref = "" + path + "['" + key + "']", __indexOf.call(avoid_objects, _ref) < 0) && key !== 'enabledPlugin') {
                that[key] = helper(value, "" + path + "['" + key + "']");
              }
            }
            return that;
          default:
            return help_obj;
        }
      };
      return helper(obj, obj_path);
    };

    register_fixture = {
      obj: null,
      arg: [],
      json_paths: [],
      checked_paths: {}
    };

    register = function() {
      var obj_path;
      register_fixture.after_html = document.getElementsByTagName("html")[0].innerHTML;
      register_fixture.after_window = (function() {
        var _i, _len, _ref, _results;
        _ref = register_fixture.json_paths;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          obj_path = _ref[_i];
          _results.push(register_f2s(eval(obj_path), obj_path, "after_window"));
        }
        return _results;
      })();
      return (new porky.Db(DBNAME, TABLE)).put(register_fixture);
    };

    function Register(register_data) {
      var eval_code, field, obj_path, value;
      for (field in register_data) {
        value = register_data[field];
        if (field === 'arg') {
          register_fixture[field] = register_f2s(value, 'fixture.arg', 'arg');
        } else {
          register_fixture[field] = value;
        }
      }
      if (register_fixture.json_paths != null) {
        register_fixture.before_window = (function() {
          var _i, _len, _ref, _results;
          _ref = register_fixture.json_paths;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            obj_path = _ref[_i];
            _results.push(register_f2s(eval(obj_path), obj_path, "before_window"));
          }
          return _results;
        })();
      }
      register_fixture.before_html = document.getElementsByTagName("html")[0].innerHTML;
      eval_code = "" + register_fixture.func + ".apply(register_fixture.obj,register_fixture.arg)";
      register_fixture.return_value = register_f2s(eval(eval_code), 'fixture.return_value', 'return_value');
      register_fixture.delay = register_fixture.delay || 0;
      setTimeout(function() {
        return register();
      }, register_fixture.delay);
    }

    return Register;

  })();

  porky.Reregister = (function() {
    var DBNAME, TABLE;

    Reregister.name = 'Reregister';

    DBNAME = 'PORKY';

    TABLE = 'fixtures';

    function Reregister(name) {
      (new porky.Db(DBNAME, TABLE)).find(name).done(function(fixture) {
        return new porky.Register(fixture);
      });
    }

    return Reregister;

  })();

  porky.Runner = (function() {
    var DBNAME, TABLE, before_s2f, func_pattern, judge, test;

    Runner.name = 'Runner';

    DBNAME = 'PORKY';

    TABLE = 'fixtures';

    func_pattern = /\(function\(\)\{return /;

    before_s2f = function(obj, obj_path) {
      var helper, setw;
      setw = function(path, help_db) {
        var eval_str;
        eval_str = "" + path + " = help_db";
        return eval(eval_str);
      };
      helper = function(help_db, path) {
        var key, v, value, _i, _len;
        switch (false) {
          case !(help_db instanceof Array):
            for (_i = 0, _len = help_db.length; _i < _len; _i++) {
              v = help_db[_i];
              helper(v, "" + path + "[" + _i + "]");
            }
            break;
          case typeof help_db !== "object":
            for (key in help_db) {
              value = help_db[key];
              helper(help_db[key], "" + path + "['" + key + "']");
            }
            break;
          case !(typeof help_db === 'string' && help_db.match(func_pattern) !== null):
            setw(path, eval(help_db));
            break;
          default:
            setw(path, help_db);
        }
      };
      return helper(obj, obj_path);
    };

    judge = function(arg) {
      var after_f2s, flag, flags, i, path;
      after_f2s = function(obj, obj_path, obj_type) {
        var checked_objects, fixture, flag, helper, inner_fail, not_same_type;
        fixture = arg.fixture;
        inner_fail = function(expected, actual, path) {
          var flag;
          console.group('javascript object fail');
          console.log('%cfail', 'background-color:red;color:white');
          console.group('json path');
          console.log(path);
          console.groupEnd('json path');
          console.group('expected');
          console.log(expected);
          console.groupEnd('expected');
          console.group('actual');
          console.log(actual);
          console.groupEnd('actual');
          console.groupEnd('json fail');
          return flag = false;
        };
        not_same_type = function(expected, actual) {
          return typeof expected !== typeof actual;
        };
        flag = true;
        checked_objects = [];
        helper = function(help_db, path) {
          var db_path, evaled_func, evaled_obj, help_window, i, key, path_index, v, value, window_func, _i, _len;
          help_window = eval(path);
          switch (false) {
            case help_db !== null:
              if (help_window !== null) {
                inner_fail(help_db, help_window, path);
              }
              break;
            case !(help_window instanceof jQuery):
              console.log('%cPorky does not support jQuery objects', 'color:#666');
              'jQuery object';

              break;
            case __indexOf.call(checked_objects, help_db) < 0:
              path_index = checked_objects.indexOf(help_db);
              db_path = fixture.checked_paths[obj_type][path_index];
              evaled_obj = eval(db_path);
              break;
            case !(help_db instanceof Array):
              checked_objects.push(help_db);
              if (help_db.length !== help_window.length || not_same_type(help_db, help_window)) {
                inner_fail(help_db, help_window);
              } else {
                for (i = _i = 0, _len = help_window.length; _i < _len; i = ++_i) {
                  v = help_window[i];
                  helper(help_db[i], "" + path + "[" + i + "]");
                }
              }
              break;
            case !(typeof help_window === 'object' && typeof help_db === 'string' && help_db.match(func_pattern) !== null):
              evaled_obj = eval(help_db);
              checked_objects.push(evaled_obj);
              if (evaled_obj !== help_window) {
                inner_fail(evaled_obj, help_window, path);
              }
              break;
            case typeof help_db !== "object":
              checked_objects.push(help_db);
              if (not_same_type(help_db, help_window)) {
                inner_fail(help_db, help_window, path);
              } else {
                for (key in help_db) {
                  value = help_db[key];
                  helper(help_db[key], "" + path + "['" + key + "']");
                }
              }
              break;
            case !(typeof help_window === 'function' && typeof help_db === 'string'):
              window_func = "(function(){return " + (String(help_window)) + "})()";
              if (help_db !== window_func) {
                evaled_func = eval(help_db);
                inner_fail(evaled_func, help_window, path);
              }
              break;
            default:
              if (help_db !== help_window) {
                inner_fail(help_db, help_window, path);
              }
          }
        };
        helper(obj, obj_path);
        return flag;
      };
      console.group('Fixture');
      console.log(arg.fixture);
      console.groupEnd('Fixture');
      console.group('UI test');
      if (arg.fixture.after_html === document.getElementsByTagName("html")[0].innerHTML) {
        success();
      } else {
        fail();
      }
      console.groupEnd('UI test');
      console.group('Return value test');
      flag = after_f2s(arg.current_return_value, 'arg.current_return_value', 'return_value');
      if (flag) {
        success();
      }
      console.groupEnd('Return value test');
      console.group('JSON test');
      if (arg.fixture.json_paths != null) {
        flags = (function() {
          var _i, _len, _ref, _results;
          _ref = arg.fixture.json_paths;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            path = _ref[i];
            _results.push(after_f2s(arg.fixture.after_window[i], path, 'after_window'));
          }
          return _results;
        })();
      } else {
        flags = [];
      }
      if (__indexOf.call(flags, false) < 0) {
        success();
      }
      console.groupEnd('JSON test');
      console.log("Delay: " + arg.fixture.delay + "ms");
      console.timeEnd(arg.fixture.name);
      console.groupEnd(arg.fixture.name);
      arg.dfd.resolve();
    };

    test = function(list) {
      var current_return_value, dfd, eval_code, fixture, i, obj, _i, _len, _ref;
      if (list.length === 0) {
        console.timeEnd('Porky');
        console.groupEnd('Porky');
        return;
      }
      fixture = list.shift();
      console.group(fixture.name);
      console.time(fixture.name);
      if (fixture.before_window != null) {
        _ref = fixture.before_window;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          obj = _ref[i];
          before_s2f(obj, fixture.json_paths[i]);
        }
      }
      document.getElementsByTagName("html")[0].innerHTML = fixture.before_html;
      dfd = $.Deferred();
      dfd.then(function() {
        return test(list);
      }, function(error, event) {
        console.error(error);
        console.log(fixture);
        console.timeEnd('Porky');
        console.groupEnd('Porky');
        return 'test error';
      });
      eval_code = "" + fixture.func + ".apply(fixture.obj,fixture.arg)";
      current_return_value = eval(eval_code);
      return setTimeout(function() {
        return judge({
          "fixture": fixture,
          "dfd": dfd,
          "current_return_value": current_return_value
        });
      }, fixture.delay);
    };

    function Runner() {
      console.group('Porky');
      console.time('Porky');
      (new porky.Db(DBNAME, TABLE)).get(test);
    }

    return Runner;

  })();

  porky.Deleter = (function() {
    var DBNAME, TABLE;

    Deleter.name = 'Deleter';

    DBNAME = 'PORKY';

    TABLE = 'fixtures';

    function Deleter(key) {
      (new porky.Db(DBNAME, TABLE))["delete"](key);
    }

    return Deleter;

  })();

  porky.register = function(fixture) {
    return new porky.Register(fixture);
  };

  porky.reregister = function(name) {
    return new porky.Reregister(name);
  };

  porky.run = function() {
    return new porky.Runner();
  };

  porky["delete"] = function(key) {
    return new porky.Deleter(key);
  };

}).call(this);
